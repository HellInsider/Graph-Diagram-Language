# Generated from GDL.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\61")
        buf.write("\u012e\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3")
        buf.write("\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b\3\t\3")
        buf.write("\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\13\3")
        buf.write("\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\16\3\16\3")
        buf.write("\16\3\16\3\16\3\16\3\16\3\16\3\17\3\17\3\17\3\17\3\20")
        buf.write("\3\20\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\22")
        buf.write("\3\22\3\23\3\23\3\24\3\24\3\25\3\25\3\26\3\26\3\27\3\27")
        buf.write("\3\30\3\30\3\31\3\31\3\31\3\32\3\32\3\32\3\33\3\33\3\34")
        buf.write("\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3 \3!")
        buf.write("\3!\3!\3!\3!\3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\3")
        buf.write("#\3#\3#\3$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3&\3&\3&\3\'")
        buf.write("\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3)\3)\3)\3)\3*\3*\3*\3*\3")
        buf.write("+\3+\3+\3+\3,\3,\3,\3,\3,\3-\3-\3-\3-\3-\3.\6.\u0122\n")
        buf.write(".\r.\16.\u0123\3/\6/\u0127\n/\r/\16/\u0128\3\60\3\60\3")
        buf.write("\60\3\60\2\2\61\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23")
        buf.write("\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25")
        buf.write(")\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A")
        buf.write("\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61\3\2\4\5\2\62;C\\")
        buf.write("c|\5\2\13\f\17\17\"\"\2\u012f\2\3\3\2\2\2\2\5\3\2\2\2")
        buf.write("\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17")
        buf.write("\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3")
        buf.write("\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2")
        buf.write("\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3")
        buf.write("\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2")
        buf.write("\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3")
        buf.write("\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E")
        buf.write("\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2")
        buf.write("O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2")
        buf.write("\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\3a\3\2\2")
        buf.write("\2\5g\3\2\2\2\7i\3\2\2\2\tk\3\2\2\2\13s\3\2\2\2\rw\3\2")
        buf.write("\2\2\17}\3\2\2\2\21\u0083\3\2\2\2\23\u0089\3\2\2\2\25")
        buf.write("\u0090\3\2\2\2\27\u0094\3\2\2\2\31\u0099\3\2\2\2\33\u009b")
        buf.write("\3\2\2\2\35\u00a3\3\2\2\2\37\u00a7\3\2\2\2!\u00ab\3\2")
        buf.write("\2\2#\u00b2\3\2\2\2%\u00b4\3\2\2\2\'\u00b6\3\2\2\2)\u00b8")
        buf.write("\3\2\2\2+\u00ba\3\2\2\2-\u00bc\3\2\2\2/\u00be\3\2\2\2")
        buf.write("\61\u00c0\3\2\2\2\63\u00c3\3\2\2\2\65\u00c6\3\2\2\2\67")
        buf.write("\u00c8\3\2\2\29\u00cc\3\2\2\2;\u00d0\3\2\2\2=\u00d6\3")
        buf.write("\2\2\2?\u00db\3\2\2\2A\u00e0\3\2\2\2C\u00e7\3\2\2\2E\u00ed")
        buf.write("\3\2\2\2G\u00f3\3\2\2\2I\u00f8\3\2\2\2K\u00fe\3\2\2\2")
        buf.write("M\u0101\3\2\2\2O\u0106\3\2\2\2Q\u010a\3\2\2\2S\u010e\3")
        buf.write("\2\2\2U\u0112\3\2\2\2W\u0116\3\2\2\2Y\u011b\3\2\2\2[\u0121")
        buf.write("\3\2\2\2]\u0126\3\2\2\2_\u012a\3\2\2\2ab\7I\2\2bc\7t\2")
        buf.write("\2cd\7c\2\2de\7r\2\2ef\7j\2\2f\4\3\2\2\2gh\7}\2\2h\6\3")
        buf.write("\2\2\2ij\7\177\2\2j\b\3\2\2\2kl\7n\2\2lm\7c\2\2mn\7{\2")
        buf.write("\2no\7q\2\2op\7w\2\2pq\7v\2\2qr\7<\2\2r\n\3\2\2\2st\7")
        buf.write("f\2\2tu\7q\2\2uv\7v\2\2v\f\3\2\2\2wx\7p\2\2xy\7g\2\2y")
        buf.write("z\7c\2\2z{\7v\2\2{|\7q\2\2|\16\3\2\2\2}~\7v\2\2~\177\7")
        buf.write("y\2\2\177\u0080\7q\2\2\u0080\u0081\7r\2\2\u0081\u0082")
        buf.write("\7k\2\2\u0082\20\3\2\2\2\u0083\u0084\7e\2\2\u0084\u0085")
        buf.write("\7k\2\2\u0085\u0086\7t\2\2\u0086\u0087\7e\2\2\u0087\u0088")
        buf.write("\7q\2\2\u0088\22\3\2\2\2\u0089\u008a\7i\2\2\u008a\u008b")
        buf.write("\7t\2\2\u008b\u008c\7c\2\2\u008c\u008d\7r\2\2\u008d\u008e")
        buf.write("\7j\2\2\u008e\u008f\7u\2\2\u008f\24\3\2\2\2\u0090\u0091")
        buf.write("\7h\2\2\u0091\u0092\7f\2\2\u0092\u0093\7r\2\2\u0093\26")
        buf.write("\3\2\2\2\u0094\u0095\7u\2\2\u0095\u0096\7h\2\2\u0096\u0097")
        buf.write("\7f\2\2\u0097\u0098\7r\2\2\u0098\30\3\2\2\2\u0099\u009a")
        buf.write("\7=\2\2\u009a\32\3\2\2\2\u009b\u009c\7u\2\2\u009c\u009d")
        buf.write("\7c\2\2\u009d\u009e\7x\2\2\u009e\u009f\7g\2\2\u009f\u00a0")
        buf.write("\7C\2\2\u00a0\u00a1\7u\2\2\u00a1\u00a2\7<\2\2\u00a2\34")
        buf.write("\3\2\2\2\u00a3\u00a4\7r\2\2\u00a4\u00a5\7p\2\2\u00a5\u00a6")
        buf.write("\7i\2\2\u00a6\36\3\2\2\2\u00a7\u00a8\7l\2\2\u00a8\u00a9")
        buf.write("\7r\2\2\u00a9\u00aa\7i\2\2\u00aa \3\2\2\2\u00ab\u00ac")
        buf.write("\7v\2\2\u00ac\u00ad\7k\2\2\u00ad\u00ae\7v\2\2\u00ae\u00af")
        buf.write("\7n\2\2\u00af\u00b0\7g\2\2\u00b0\u00b1\7<\2\2\u00b1\"")
        buf.write("\3\2\2\2\u00b2\u00b3\7<\2\2\u00b3$\3\2\2\2\u00b4\u00b5")
        buf.write("\7?\2\2\u00b5&\3\2\2\2\u00b6\u00b7\7]\2\2\u00b7(\3\2\2")
        buf.write("\2\u00b8\u00b9\7_\2\2\u00b9*\3\2\2\2\u00ba\u00bb\7.\2")
        buf.write("\2\u00bb,\3\2\2\2\u00bc\u00bd\7*\2\2\u00bd.\3\2\2\2\u00be")
        buf.write("\u00bf\7+\2\2\u00bf\60\3\2\2\2\u00c0\u00c1\7/\2\2\u00c1")
        buf.write("\u00c2\7@\2\2\u00c2\62\3\2\2\2\u00c3\u00c4\7>\2\2\u00c4")
        buf.write("\u00c5\7/\2\2\u00c5\64\3\2\2\2\u00c6\u00c7\7/\2\2\u00c7")
        buf.write("\66\3\2\2\2\u00c8\u00c9\7e\2\2\u00c9\u00ca\7n\2\2\u00ca")
        buf.write("\u00cb\7t\2\2\u00cb8\3\2\2\2\u00cc\u00cd\7T\2\2\u00cd")
        buf.write("\u00ce\7g\2\2\u00ce\u00cf\7f\2\2\u00cf:\3\2\2\2\u00d0")
        buf.write("\u00d1\7I\2\2\u00d1\u00d2\7t\2\2\u00d2\u00d3\7g\2\2\u00d3")
        buf.write("\u00d4\7g\2\2\u00d4\u00d5\7p\2\2\u00d5<\3\2\2\2\u00d6")
        buf.write("\u00d7\7D\2\2\u00d7\u00d8\7n\2\2\u00d8\u00d9\7w\2\2\u00d9")
        buf.write("\u00da\7g\2\2\u00da>\3\2\2\2\u00db\u00dc\7I\2\2\u00dc")
        buf.write("\u00dd\7t\2\2\u00dd\u00de\7c\2\2\u00de\u00df\7{\2\2\u00df")
        buf.write("@\3\2\2\2\u00e0\u00e1\7[\2\2\u00e1\u00e2\7g\2\2\u00e2")
        buf.write("\u00e3\7n\2\2\u00e3\u00e4\7n\2\2\u00e4\u00e5\7q\2\2\u00e5")
        buf.write("\u00e6\7y\2\2\u00e6B\3\2\2\2\u00e7\u00e8\7D\2\2\u00e8")
        buf.write("\u00e9\7n\2\2\u00e9\u00ea\7c\2\2\u00ea\u00eb\7e\2\2\u00eb")
        buf.write("\u00ec\7m\2\2\u00ecD\3\2\2\2\u00ed\u00ee\7r\2\2\u00ee")
        buf.write("\u00ef\7n\2\2\u00ef\u00f0\7c\2\2\u00f0\u00f1\7e\2\2\u00f1")
        buf.write("\u00f2\7g\2\2\u00f2F\3\2\2\2\u00f3\u00f4\7N\2\2\u00f4")
        buf.write("\u00f5\7g\2\2\u00f5\u00f6\7h\2\2\u00f6\u00f7\7v\2\2\u00f7")
        buf.write("H\3\2\2\2\u00f8\u00f9\7T\2\2\u00f9\u00fa\7k\2\2\u00fa")
        buf.write("\u00fb\7i\2\2\u00fb\u00fc\7j\2\2\u00fc\u00fd\7v\2\2\u00fd")
        buf.write("J\3\2\2\2\u00fe\u00ff\7W\2\2\u00ff\u0100\7r\2\2\u0100")
        buf.write("L\3\2\2\2\u0101\u0102\7F\2\2\u0102\u0103\7q\2\2\u0103")
        buf.write("\u0104\7y\2\2\u0104\u0105\7p\2\2\u0105N\3\2\2\2\u0106")
        buf.write("\u0107\7W\2\2\u0107\u0108\7/\2\2\u0108\u0109\7N\2\2\u0109")
        buf.write("P\3\2\2\2\u010a\u010b\7W\2\2\u010b\u010c\7/\2\2\u010c")
        buf.write("\u010d\7T\2\2\u010dR\3\2\2\2\u010e\u010f\7F\2\2\u010f")
        buf.write("\u0110\7/\2\2\u0110\u0111\7N\2\2\u0111T\3\2\2\2\u0112")
        buf.write("\u0113\7F\2\2\u0113\u0114\7/\2\2\u0114\u0115\7T\2\2\u0115")
        buf.write("V\3\2\2\2\u0116\u0117\7u\2\2\u0117\u0118\7k\2\2\u0118")
        buf.write("\u0119\7|\2\2\u0119\u011a\7g\2\2\u011aX\3\2\2\2\u011b")
        buf.write("\u011c\7h\2\2\u011c\u011d\7q\2\2\u011d\u011e\7p\2\2\u011e")
        buf.write("\u011f\7v\2\2\u011fZ\3\2\2\2\u0120\u0122\4\62;\2\u0121")
        buf.write("\u0120\3\2\2\2\u0122\u0123\3\2\2\2\u0123\u0121\3\2\2\2")
        buf.write("\u0123\u0124\3\2\2\2\u0124\\\3\2\2\2\u0125\u0127\t\2\2")
        buf.write("\2\u0126\u0125\3\2\2\2\u0127\u0128\3\2\2\2\u0128\u0126")
        buf.write("\3\2\2\2\u0128\u0129\3\2\2\2\u0129^\3\2\2\2\u012a\u012b")
        buf.write("\t\3\2\2\u012b\u012c\3\2\2\2\u012c\u012d\b\60\2\2\u012d")
        buf.write("`\3\2\2\2\6\2\u0123\u0126\u0128\3\b\2\2")
        return buf.getvalue()


class GDLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    T__43 = 44
    INTEGER = 45
    TEXT = 46
    SPACE = 47

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'Graph'", "'{'", "'}'", "'layout:'", "'dot'", "'neato'", "'twopi'", 
            "'circo'", "'graphs'", "'fdp'", "'sfdp'", "';'", "'saveAs:'", 
            "'png'", "'jpg'", "'title:'", "':'", "'='", "'['", "']'", "','", 
            "'('", "')'", "'->'", "'<-'", "'-'", "'clr'", "'Red'", "'Green'", 
            "'Blue'", "'Gray'", "'Yellow'", "'Black'", "'place'", "'Left'", 
            "'Right'", "'Up'", "'Down'", "'U-L'", "'U-R'", "'D-L'", "'D-R'", 
            "'size'", "'font'" ]

    symbolicNames = [ "<INVALID>",
            "INTEGER", "TEXT", "SPACE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "T__40", "T__41", "T__42", "T__43", 
                  "INTEGER", "TEXT", "SPACE" ]

    grammarFileName = "GDL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


